----------------------------------------------------------------------------------
-- Company: McGill University, ECE Department
-- Designer: Camille Leroux
-- This HDL Code was generated by a PERL script
-- Generation Date:   Nov. 4 2010    
-- Design Name: wgng_sig_plus_emi
-- Module Name:    
-- Description: 
--
 ----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
 
entity wgng_sig_plus_emi is
   Port ( clk : in std_logic;
          rst : in std_logic;
          enable : in std_logic;
          sigma : in std_logic_vector(15 downto 0);
          entree : in std_logic;
          init_lfsr_cos1_01 : in std_logic_vector(23 downto 0);
          init_lfsr_cos1_02 : in std_logic_vector(23 downto 0);
          init_lfsr_cos1_03 : in std_logic_vector(23 downto 0);
          init_lfsr_cos1_04 : in std_logic_vector(23 downto 0);
          init_lfsr_cos2_01 : in std_logic_vector(22 downto 0);
          init_lfsr_cos2_02 : in std_logic_vector(22 downto 0);
          init_lfsr_cos2_03 : in std_logic_vector(22 downto 0);
          init_lfsr_cos2_04 : in std_logic_vector(22 downto 0);
          init_lfsr_ln1_01 : in std_logic_vector(29 downto 0);
          init_lfsr_ln1_02 : in std_logic_vector(29 downto 0);
          init_lfsr_ln1_03 : in std_logic_vector(29 downto 0);
          init_lfsr_ln1_04 : in std_logic_vector(29 downto 0);
          init_lfsr_ln2_01 : in std_logic_vector(28 downto 0);
          init_lfsr_ln2_02 : in std_logic_vector(28 downto 0);
          init_lfsr_ln2_03 : in std_logic_vector(28 downto 0);
          init_lfsr_ln2_04 : in std_logic_vector(28 downto 0);
          init_lfsr_ln3_01 : in std_logic_vector(26 downto 0);
          init_lfsr_ln3_02 : in std_logic_vector(26 downto 0);
          init_lfsr_ln3_03 : in std_logic_vector(26 downto 0);
          init_lfsr_ln3_04 : in std_logic_vector(26 downto 0);
          init_lfsr_ln4_01 : in std_logic_vector(25 downto 0);
          init_lfsr_ln4_02 : in std_logic_vector(25 downto 0);
          init_lfsr_ln4_03 : in std_logic_vector(25 downto 0);
          init_lfsr_ln4_04 : in std_logic_vector(25 downto 0);
          init_lfsr_ln5_01 : in std_logic_vector(24 downto 0);
          init_lfsr_ln5_02 : in std_logic_vector(24 downto 0);
          init_lfsr_ln5_03 : in std_logic_vector(24 downto 0);
          init_lfsr_ln5_04 : in std_logic_vector(24 downto 0);
          init_lfsr_signe_01 : in std_logic_vector(27 downto 0);
          init_lfsr_signe_02 : in std_logic_vector(27 downto 0);
          init_lfsr_signe_03 : in std_logic_vector(27 downto 0);
          init_lfsr_signe_04 : in std_logic_vector(27 downto 0);
          valid : out std_logic;
          sortie : out std_logic_vector(2 downto 0));
end wgng_sig_plus_emi;
 
architecture RTL of wgng_sig_plus_emi is


component wgng_sig is
   Port ( clk : in std_logic;
          rst : in std_logic;
          config : in std_logic;
          seed : in std_logic;
          sigma : in std_logic_vector(15 downto 0);
          init_lfsr_cos1_01 : in std_logic_vector(23 downto 0);
          init_lfsr_cos1_02 : in std_logic_vector(23 downto 0);
          init_lfsr_cos1_03 : in std_logic_vector(23 downto 0);
          init_lfsr_cos1_04 : in std_logic_vector(23 downto 0);
          init_lfsr_cos2_01 : in std_logic_vector(22 downto 0);
          init_lfsr_cos2_02 : in std_logic_vector(22 downto 0);
          init_lfsr_cos2_03 : in std_logic_vector(22 downto 0);
          init_lfsr_cos2_04 : in std_logic_vector(22 downto 0);
          init_lfsr_ln1_01 : in std_logic_vector(29 downto 0);
          init_lfsr_ln1_02 : in std_logic_vector(29 downto 0);
          init_lfsr_ln1_03 : in std_logic_vector(29 downto 0);
          init_lfsr_ln1_04 : in std_logic_vector(29 downto 0);
          init_lfsr_ln2_01 : in std_logic_vector(28 downto 0);
          init_lfsr_ln2_02 : in std_logic_vector(28 downto 0);
          init_lfsr_ln2_03 : in std_logic_vector(28 downto 0);
          init_lfsr_ln2_04 : in std_logic_vector(28 downto 0);
          init_lfsr_ln3_01 : in std_logic_vector(26 downto 0);
          init_lfsr_ln3_02 : in std_logic_vector(26 downto 0);
          init_lfsr_ln3_03 : in std_logic_vector(26 downto 0);
          init_lfsr_ln3_04 : in std_logic_vector(26 downto 0);
          init_lfsr_ln4_01 : in std_logic_vector(25 downto 0);
          init_lfsr_ln4_02 : in std_logic_vector(25 downto 0);
          init_lfsr_ln4_03 : in std_logic_vector(25 downto 0);
          init_lfsr_ln4_04 : in std_logic_vector(25 downto 0);
          init_lfsr_ln5_01 : in std_logic_vector(24 downto 0);
          init_lfsr_ln5_02 : in std_logic_vector(24 downto 0);
          init_lfsr_ln5_03 : in std_logic_vector(24 downto 0);
          init_lfsr_ln5_04 : in std_logic_vector(24 downto 0);
          init_lfsr_signe_01 : in std_logic_vector(27 downto 0);
          init_lfsr_signe_02 : in std_logic_vector(27 downto 0);
          init_lfsr_signe_03 : in std_logic_vector(27 downto 0);
          init_lfsr_signe_04 : in std_logic_vector(27 downto 0);
          wgn : out std_logic_vector(9 downto 0));
end component;


component addition is
   Port ( clk : in std_logic;
          rst : in std_logic;
          enable : in std_logic;
          bit_emi : in std_logic;
          bruit : in std_logic_vector(9 downto 0);
          bit_plus_bruit : out std_logic_vector(2 downto 0));
end component;



	signal zero: std_logic_vector(9 downto 0);
	signal wgng_signal : std_logic_vector(9 downto 0);

begin
	inst_wgng_sig : wgng_sig PORT MAP (
	 clk => clk,
	 rst => rst,
	 config => '0',
	 seed => '0',
	 sigma => sigma,
	 init_lfsr_cos1_01  => init_lfsr_cos1_01, 
	 init_lfsr_cos1_02  => init_lfsr_cos1_02,
	 init_lfsr_cos1_03  => init_lfsr_cos1_03,
	 init_lfsr_cos1_04  => init_lfsr_cos1_04,
	 init_lfsr_cos2_01  => init_lfsr_cos2_01,
	 init_lfsr_cos2_02  => init_lfsr_cos2_02,
	 init_lfsr_cos2_03  => init_lfsr_cos2_03,
	 init_lfsr_cos2_04  => init_lfsr_cos2_04,
	 init_lfsr_ln1_01   => init_lfsr_ln1_01,
	 init_lfsr_ln1_02   => init_lfsr_ln1_02,
	 init_lfsr_ln1_03   => init_lfsr_ln1_03,
	 init_lfsr_ln1_04   => init_lfsr_ln1_04,
	 init_lfsr_ln2_01   => init_lfsr_ln2_01,
	 init_lfsr_ln2_02   => init_lfsr_ln2_02,
	 init_lfsr_ln2_03   => init_lfsr_ln2_03,
	 init_lfsr_ln2_04   => init_lfsr_ln2_04,
	 init_lfsr_ln3_01   => init_lfsr_ln3_01,
	 init_lfsr_ln3_02   => init_lfsr_ln3_02,
	 init_lfsr_ln3_03   => init_lfsr_ln3_03,
	 init_lfsr_ln3_04   => init_lfsr_ln3_04,
	 init_lfsr_ln4_01   => init_lfsr_ln4_01,
	 init_lfsr_ln4_02   => init_lfsr_ln4_02,
	 init_lfsr_ln4_03   => init_lfsr_ln4_03,
	 init_lfsr_ln4_04   => init_lfsr_ln4_04,
	 init_lfsr_ln5_01   => init_lfsr_ln5_01,
	 init_lfsr_ln5_02   => init_lfsr_ln5_02,
	 init_lfsr_ln5_03   => init_lfsr_ln5_03,
	 init_lfsr_ln5_04   => init_lfsr_ln5_04,
	 init_lfsr_signe_01 => init_lfsr_signe_01,
	 init_lfsr_signe_02 => init_lfsr_signe_02,
	 init_lfsr_signe_03 => init_lfsr_signe_03,
	 init_lfsr_signe_04 => init_lfsr_signe_04,	
	 wgn => wgng_signal); 	  --(4,6)
	 zero <= "0000000000";

	 inst_add : addition  PORT MAP (clk,rst,ENABLE,entree,wgng_signal,sortie);

  process(clk,rst)
  begin
    if rst = '1' then
      valid <= '0';
    elsif clk'event and clk = '1' then
      valid <= ENABLE;
    end if;
  end process;
end RTL;
