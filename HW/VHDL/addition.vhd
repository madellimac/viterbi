----------------------------------------------------------------------------------
-- Company: McGill University, ECE Department
-- Designer: Camille Leroux
-- This HDL Code was generated by a PERL script
-- Generation Date:   Nov. 4 2010    
-- Design Name: addition
-- Module Name:    
-- Description: 
--
 ----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_SIGNED.ALL;
 
entity addition is
   Port ( clk : in std_logic;
          rst : in std_logic;
          enable : in std_logic;
          bruit : in std_logic_vector(9 downto 0);
          bit_emi : in std_logic;
          bit_plus_bruit : out std_logic_vector(2 downto 0));
end addition;
 
architecture RTL of addition is



signal bit_plus_bruit_tmp : std_logic_vector(2 downto 0);
signal bit_emi_vect : std_logic_vector(10 downto 0);
signal res : std_logic_vector(11 downto 0);

begin

   bit_emi_vect <= "00001000000" when bit_emi='0' else "11111000000"; -- +1 et -1 au format (5,6)
	
		adder_proc : process(bruit, bit_emi_vect)
		begin
			res <= ((bruit(9)&bruit(9)& bruit)) + (bit_emi_vect(10)&bit_emi_vect);
		end process;
		
		sat : process(res)
		begin

			if (res > "000000110000") then --(6,6)	
            bit_plus_bruit_tmp <="011";
         elsif (res < "111111000000") then 
            bit_plus_bruit_tmp <= "100";
            -- Troncature
         else 
				bit_plus_bruit_tmp <= res(6 downto 4)+res(3);
         end if;
		end process;
	
		--bit_plus_bruit <= bit_plus_bruit_tmp;
		out_reg : process(rst,clk)
		begin
			if (rst ='1') then
				bit_plus_bruit <= (others => '0');
			elsif (clk='1' and clk'event)	then
				if(enable = '1') then
					bit_plus_bruit <= bit_plus_bruit_tmp;
				end if;
			end if;
		end process;
   end RTL; 

